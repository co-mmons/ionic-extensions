import { ChangeDetectorRef, EventEmitter } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import { IonInput, Platform } from "@ionic/angular";
export declare const tagsValueAccessor: {
    provide: import("@angular/core").InjectionToken<readonly ControlValueAccessor[]>;
    useExisting: import("@angular/core").Type<any>;
    multi: boolean;
};
export declare class TagsInput implements ControlValueAccessor {
    plt: Platform;
    ref: ChangeDetectorRef;
    constructor(plt: Platform, ref: ChangeDetectorRef);
    readonly: boolean;
    hideRemove: boolean;
    maxTags: number;
    placeholder: string;
    type: string;
    separatorStr: string;
    canEnterAdd: boolean;
    canBackspaceRemove: boolean;
    verifyFn: (tagSrt: string) => boolean;
    sortFn: (a: string, b: string) => number;
    sortable: boolean;
    _once: boolean;
    set once(value: boolean | string);
    get once(): boolean | string;
    change: EventEmitter<any>;
    ionFocus: EventEmitter<any>;
    ionBlur: EventEmitter<any>;
    input: IonInput;
    _editTag: string;
    _tags: string[];
    _isFocus: boolean;
    _onChanged: Function;
    _onTouched: Function;
    keyAddTag(): any;
    separatorStrAddTag(): any;
    keyRemoveTag(ev: Event): any;
    btnRemoveTag($index: number): any;
    verifyTag(tagStr: string): boolean;
    pushTag(tagStr: string): any;
    private sortTags;
    removeTag($index: number): any;
    isOnce(tagStr: string): boolean;
    _click(ev: UIEvent): any;
    blur(): void;
    focus(): any;
    writeValue(val: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setValue(val: any): any;
}
