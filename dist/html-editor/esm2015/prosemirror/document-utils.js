/**
 * Checks if node is an empty paragraph.
 */
export function isEmptyParagraph(node) {
    return (!node ||
        (node.type.name === "paragraph" && !node.textContent && !node.childCount));
}
/**
 * Returns false if node contains only empty inline nodes and hardBreaks.
 */
export function hasVisibleContent(node) {
    const isInlineNodeHasVisibleContent = (inlineNode) => {
        return inlineNode.isText
            ? !!inlineNode.textContent.trim()
            : inlineNode.type.name !== "hardBreak";
    };
    if (node.isInline) {
        return isInlineNodeHasVisibleContent(node);
    }
    else if (node.isBlock && (node.isLeaf || node.isAtom)) {
        return true;
    }
    else if (!node.childCount) {
        return false;
    }
    for (let index = 0; index < node.childCount; index++) {
        const child = node.child(index);
        if (hasVisibleContent(child)) {
            return true;
        }
    }
    return false;
}
/**
 * Checks if a node has any content. Ignores node that only contain empty block nodes.
 */
export function isNodeEmpty(node) {
    if (node && node.textContent) {
        return false;
    }
    if (!node ||
        !node.childCount ||
        (node.childCount === 1 && isEmptyParagraph(node.firstChild))) {
        return true;
    }
    const block = [];
    const nonBlock = [];
    node.forEach(child => {
        child.isInline ? nonBlock.push(child) : block.push(child);
    });
    return (!nonBlock.length &&
        !block.filter(childNode => (!!childNode.childCount &&
            !(childNode.childCount === 1 && isEmptyParagraph(childNode.firstChild))) ||
            childNode.isAtom).length);
}
/**
 * Checks if a node looks like an empty document
 */
export function isEmptyDocument(node) {
    const nodeChild = node.content.firstChild;
    if (node.childCount !== 1 || !nodeChild) {
        return false;
    }
    return (nodeChild.type.name === "paragraph" &&
        !nodeChild.childCount &&
        nodeChild.nodeSize === 2 &&
        (!nodeChild.marks || nodeChild.marks.length === 0));
}
export const getStepRange = (transaction) => {
    let from = -1;
    let to = -1;
    transaction.steps.forEach(step => {
        step.getMap().forEach((_oldStart, _oldEnd, newStart, newEnd) => {
            from = newStart < from || from === -1 ? newStart : from;
            to = newEnd < to || to === -1 ? newEnd : to;
        });
    });
    if (from !== -1) {
        return { from, to };
    }
    return null;
};
/**
 * Find the farthest node given a condition
 * @param predicate Function to check the node
 */
export const findFarthestParentNode = (predicate) => (selection) => {
    const { $from } = selection;
    let candidate = null;
    for (let i = $from.depth; i > 0; i--) {
        const node = $from.node(i);
        if (predicate(node)) {
            candidate = {
                pos: i > 0 ? $from.before(i) : 0,
                start: $from.start(i),
                depth: i,
                node,
            };
        }
    }
    return candidate;
};
export const isSelectionEndOfParagraph = (state) => state.selection.$to.parent.type === state.schema.nodes.paragraph &&
    state.selection.$to.pos === state.doc.resolve(state.selection.$to.pos).end();
export function nodesBetweenChanged(tr, f, startPos) {
    const stepRange = getStepRange(tr);
    if (!stepRange) {
        return;
    }
    tr.doc.nodesBetween(stepRange.from, stepRange.to, f, startPos);
}
export function getNodesCount(node) {
    const count = {};
    node.nodesBetween(0, node.nodeSize - 2, node => {
        count[node.type.name] = (count[node.type.name] || 0) + 1;
    });
    return count;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQtdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaHRtbC1lZGl0b3IvcHJvc2VtaXJyb3IvZG9jdW1lbnQtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUE7O0dBRUc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsSUFBa0I7SUFDL0MsT0FBTyxDQUNILENBQUMsSUFBSTtRQUNMLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FDNUUsQ0FBQztBQUNOLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxJQUFVO0lBQ3hDLE1BQU0sNkJBQTZCLEdBQUcsQ0FBQyxVQUFnQixFQUFFLEVBQUU7UUFDdkQsT0FBTyxVQUFVLENBQUMsTUFBTTtZQUNwQixDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFO1lBQ2pDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUM7SUFDL0MsQ0FBQyxDQUFDO0lBRUYsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1FBQ2YsT0FBTyw2QkFBNkIsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5QztTQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3JELE9BQU8sSUFBSSxDQUFDO0tBQ2Y7U0FBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUN6QixPQUFPLEtBQUssQ0FBQztLQUNoQjtJQUVELEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxF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SyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUVqRixNQUFNLFVBQVUsbUJBQW1CLENBQy9CLEVBQWUsRUFDZixDQUtzQyxFQUN0QyxRQUFpQjtJQUVqQixNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNaLE9BQU87S0FDVjtJQUVELEVBQUUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsSUFBVTtJQUNwQyxNQUFNLEtBQUssR0FBMkIsRUFBRSxDQUFDO0lBRXpDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFO1FBQzNDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Tm9kZX0gZnJvbSBcInByb3NlbWlycm9yLW1vZGVsXCI7XG5pbXBvcnQge0VkaXRvclN0YXRlLCBTZWxlY3Rpb24sIFRyYW5zYWN0aW9ufSBmcm9tIFwicHJvc2VtaXJyb3Itc3RhdGVcIjtcbmltcG9ydCB7Q29udGVudE5vZGVXaXRoUG9zfSBmcm9tIFwicHJvc2VtaXJyb3ItdXRpbHNcIjtcblxuLyoqXG4gKiBDaGVja3MgaWYgbm9kZSBpcyBhbiBlbXB0eSBwYXJhZ3JhcGguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5UGFyYWdyYXBoKG5vZGU/OiBOb2RlIHwgbnVsbCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICAgICFub2RlIHx8XG4gICAgICAgIChub2RlLnR5cGUubmFtZSA9PT0gXCJwYXJhZ3JhcGhcIiAmJiAhbm9kZS50ZXh0Q29udGVudCAmJiAhbm9kZS5jaGlsZENvdW50KVxuICAgICk7XG59XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiBub2RlIGNvbnRhaW5zIG9ubHkgZW1wdHkgaW5saW5lIG5vZGVzIGFuZCBoYXJkQnJlYWtzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzVmlzaWJsZUNvbnRlbnQobm9kZTogTm9kZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGlzSW5saW5lTm9kZUhhc1Zpc2libGVDb250ZW50ID0gKGlubGluZU5vZGU6IE5vZGUpID0+IHtcbiAgICAgICAgcmV0dXJuIGlubGluZU5vZGUuaXNUZXh0XG4gICAgICAgICAgICA/ICEhaW5saW5lTm9kZS50ZXh0Q29udGVudC50cmltKClcbiAgICAgICAgICAgIDogaW5saW5lTm9kZS50eXBlLm5hbWUgIT09IFwiaGFyZEJyZWFrXCI7XG4gICAgfTtcblxuICAgIGlmIChub2RlLmlzSW5saW5lKSB7XG4gICAgICAgIHJldHVybiBpc0lubGluZU5vZGVIYXNWaXNpYmxlQ29udGVudChub2RlKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUuaXNCbG9jayAmJiAobm9kZS5pc0xlYWYgfHwgbm9kZS5pc0F0b20pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoIW5vZGUuY2hpbGRDb3VudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG5vZGUuY2hpbGRDb3VudDsgaW5kZXgrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGUuY2hpbGQoaW5kZXgpO1xuXG4gICAgICAgIGlmIChoYXNWaXNpYmxlQ29udGVudChjaGlsZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIG5vZGUgaGFzIGFueSBjb250ZW50LiBJZ25vcmVzIG5vZGUgdGhhdCBvbmx5IGNvbnRhaW4gZW1wdHkgYmxvY2sgbm9kZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGVFbXB0eShub2RlPzogTm9kZSk6IGJvb2xlYW4ge1xuICAgIGlmIChub2RlICYmIG5vZGUudGV4dENvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgICAgIW5vZGUgfHxcbiAgICAgICAgIW5vZGUuY2hpbGRDb3VudCB8fFxuICAgICAgICAobm9kZS5jaGlsZENvdW50ID09PSAxICYmIGlzRW1wdHlQYXJhZ3JhcGgobm9kZS5maXJzdENoaWxkKSlcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgYmxvY2s6IE5vZGVbXSA9IFtdO1xuICAgIGNvbnN0IG5vbkJsb2NrOiBOb2RlW10gPSBbXTtcblxuICAgIG5vZGUuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgIGNoaWxkLmlzSW5saW5lID8gbm9uQmxvY2sucHVzaChjaGlsZCkgOiBibG9jay5wdXNoKGNoaWxkKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICAgICFub25CbG9jay5sZW5ndGggJiZcbiAgICAgICAgIWJsb2NrLmZpbHRlcihcbiAgICAgICAgICAgIGNoaWxkTm9kZSA9PlxuICAgICAgICAgICAgICAgICghIWNoaWxkTm9kZS5jaGlsZENvdW50ICYmXG4gICAgICAgICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGUuY2hpbGRDb3VudCA9PT0gMSAmJiBpc0VtcHR5UGFyYWdyYXBoKGNoaWxkTm9kZS5maXJzdENoaWxkKVxuICAgICAgICAgICAgICAgICAgICApKSB8fFxuICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5pc0F0b20sXG4gICAgICAgICkubGVuZ3RoXG4gICAgKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBub2RlIGxvb2tzIGxpa2UgYW4gZW1wdHkgZG9jdW1lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlEb2N1bWVudChub2RlOiBOb2RlKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZUNoaWxkID0gbm9kZS5jb250ZW50LmZpcnN0Q2hpbGQ7XG5cbiAgICBpZiAobm9kZS5jaGlsZENvdW50ICE9PSAxIHx8ICFub2RlQ2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgICBub2RlQ2hpbGQudHlwZS5uYW1lID09PSBcInBhcmFncmFwaFwiICYmXG4gICAgICAgICFub2RlQ2hpbGQuY2hpbGRDb3VudCAmJlxuICAgICAgICBub2RlQ2hpbGQubm9kZVNpemUgPT09IDIgJiZcbiAgICAgICAgKCFub2RlQ2hpbGQubWFya3MgfHwgbm9kZUNoaWxkLm1hcmtzLmxlbmd0aCA9PT0gMClcbiAgICApO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0U3RlcFJhbmdlID0gKFxuICAgIHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbixcbik6IHsgZnJvbTogbnVtYmVyOyB0bzogbnVtYmVyIH0gfCBudWxsID0+IHtcbiAgICBsZXQgZnJvbSA9IC0xO1xuICAgIGxldCB0byA9IC0xO1xuXG4gICAgdHJhbnNhY3Rpb24uc3RlcHMuZm9yRWFjaChzdGVwID0+IHtcbiAgICAgICAgc3RlcC5nZXRNYXAoKS5mb3JFYWNoKChfb2xkU3RhcnQsIF9vbGRFbmQsIG5ld1N0YXJ0LCBuZXdFbmQpID0+IHtcbiAgICAgICAgICAgIGZyb20gPSBuZXdTdGFydCA8IGZyb20gfHwgZnJvbSA9PT0gLTEgPyBuZXdTdGFydCA6IGZyb207XG4gICAgICAgICAgICB0byA9IG5ld0VuZCA8IHRvIHx8IHRvID09PSAtMSA/IG5ld0VuZCA6IHRvO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmIChmcm9tICE9PSAtMSkge1xuICAgICAgICByZXR1cm4geyBmcm9tLCB0byB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBGaW5kIHRoZSBmYXJ0aGVzdCBub2RlIGdpdmVuIGEgY29uZGl0aW9uXG4gKiBAcGFyYW0gcHJlZGljYXRlIEZ1bmN0aW9uIHRvIGNoZWNrIHRoZSBub2RlXG4gKi9cbmV4cG9ydCBjb25zdCBmaW5kRmFydGhlc3RQYXJlbnROb2RlID0gKHByZWRpY2F0ZTogKG5vZGU6IE5vZGUpID0+IGJvb2xlYW4pID0+IChcbiAgICBzZWxlY3Rpb246IFNlbGVjdGlvbixcbik6IENvbnRlbnROb2RlV2l0aFBvcyB8IG51bGwgPT4ge1xuICAgIGNvbnN0IHsgJGZyb20gfSA9IHNlbGVjdGlvbjtcblxuICAgIGxldCBjYW5kaWRhdGU6IENvbnRlbnROb2RlV2l0aFBvcyB8IG51bGwgPSBudWxsO1xuXG4gICAgZm9yIChsZXQgaSA9ICRmcm9tLmRlcHRoOyBpID4gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSAkZnJvbS5ub2RlKGkpO1xuICAgICAgICBpZiAocHJlZGljYXRlKG5vZGUpKSB7XG4gICAgICAgICAgICBjYW5kaWRhdGUgPSB7XG4gICAgICAgICAgICAgICAgcG9zOiBpID4gMCA/ICRmcm9tLmJlZm9yZShpKSA6IDAsXG4gICAgICAgICAgICAgICAgc3RhcnQ6ICRmcm9tLnN0YXJ0KGkpLFxuICAgICAgICAgICAgICAgIGRlcHRoOiBpLFxuICAgICAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYW5kaWRhdGU7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTZWxlY3Rpb25FbmRPZlBhcmFncmFwaCA9IChzdGF0ZTogRWRpdG9yU3RhdGUpOiBib29sZWFuID0+XG4gICAgc3RhdGUuc2VsZWN0aW9uLiR0by5wYXJlbnQudHlwZSA9PT0gc3RhdGUuc2NoZW1hLm5vZGVzLnBhcmFncmFwaCAmJlxuICAgIHN0YXRlLnNlbGVjdGlvbi4kdG8ucG9zID09PSBzdGF0ZS5kb2MucmVzb2x2ZShzdGF0ZS5zZWxlY3Rpb24uJHRvLnBvcykuZW5kKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBub2Rlc0JldHdlZW5DaGFuZ2VkKFxuICAgIHRyOiBUcmFuc2FjdGlvbixcbiAgICBmOiAoXG4gICAgICAgIG5vZGU6IE5vZGUsXG4gICAgICAgIHBvczogbnVtYmVyLFxuICAgICAgICBwYXJlbnQ6IE5vZGUsXG4gICAgICAgIGluZGV4OiBudW1iZXIsXG4gICAgKSA9PiBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZCB8IHZvaWQsXG4gICAgc3RhcnRQb3M/OiBudW1iZXIsXG4pIHtcbiAgICBjb25zdCBzdGVwUmFuZ2UgPSBnZXRTdGVwUmFuZ2UodHIpO1xuICAgIGlmICghc3RlcFJhbmdlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0ci5kb2Mubm9kZXNCZXR3ZWVuKHN0ZXBSYW5nZS5mcm9tLCBzdGVwUmFuZ2UudG8sIGYsIHN0YXJ0UG9zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5vZGVzQ291bnQobm9kZTogTm9kZSk6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4ge1xuICAgIGNvbnN0IGNvdW50OiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG5cbiAgICBub2RlLm5vZGVzQmV0d2VlbigwLCBub2RlLm5vZGVTaXplIC0gMiwgbm9kZSA9PiB7XG4gICAgICAgIGNvdW50W25vZGUudHlwZS5uYW1lXSA9IChjb3VudFtub2RlLnR5cGUubmFtZV0gfHwgMCkgKyAxO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvdW50O1xufVxuIl19