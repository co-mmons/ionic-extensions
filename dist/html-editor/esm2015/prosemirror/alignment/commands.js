import { toggleBlockMark } from "../commands/toogle-block-mark";
/**
 * Iterates over the commands one after the other,
 * passes the tr through and dispatches the cumulated transaction
 */
export const cascadeCommands = (cmds) => (state, dispatch) => {
    const { tr: baseTr } = state;
    let shouldDispatch = false;
    const onDispatchAction = (tr) => {
        tr.steps.forEach(st => {
            baseTr.step(st);
        });
        shouldDispatch = true;
    };
    cmds.forEach(cmd => {
        cmd(state, onDispatchAction);
    });
    if (dispatch && shouldDispatch) {
        dispatch(baseTr);
        return true;
    }
    return false;
};
export const isAlignable = (align) => (state, dispatch) => {
    const { nodes: { paragraph, heading }, marks: { alignment }, } = state.schema;
    return toggleBlockMark(alignment, () => (!align ? undefined : align === "left" ? false : { align }), [paragraph, heading])(state, dispatch);
};
export const changeAlignment = (align) => (state, dispatch) => {
    const { nodes: { paragraph, heading }, marks: { alignment } } = state.schema;
    return toggleBlockMark(alignment, () => (!align ? undefined : align === "left" ? false : { align }), [paragraph, heading])(state, dispatch);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvaHRtbC1lZGl0b3IvcHJvc2VtaXJyb3IvYWxpZ25tZW50L2NvbW1hbmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUc5RDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFvQixFQUFFLEVBQUUsQ0FBQyxDQUNyRCxLQUFrQixFQUNsQixRQUEwQixFQUM1QixFQUFFO0lBQ0EsTUFBTSxFQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUMsR0FBRyxLQUFLLENBQUM7SUFDM0IsSUFBSSxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBRTNCLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxFQUFlLEVBQUUsRUFBRTtRQUN6QyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsY0FBYyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDLENBQUM7SUFFRixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2YsR0FBRyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxRQUFRLElBQUksY0FBYyxFQUFFO1FBQzVCLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQztLQUNmO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsS0FBc0IsRUFBVyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUU7SUFFaEYsTUFBTSxFQUNGLEtBQUssRUFBRSxFQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUMsRUFDM0IsS0FBSyxFQUFFLEVBQUMsU0FBUyxFQUFDLEdBQ3JCLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUVqQixPQUFPLGVBQWUsQ0FDbEIsU0FBUyxFQUNULEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQy9ELENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUN2QixDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN2QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxLQUFzQixFQUFXLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRTtJQUVwRixNQUFNLEVBQ0YsS0FBSyxFQUFFLEVBQUMsU0FBUyxFQUFFLE9BQU8sRUFBQyxFQUMzQixLQUFLLEVBQUUsRUFBQyxTQUFTLEVBQUMsRUFDckIsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBRWpCLE9BQU8sZUFBZSxDQUFDLFNBQVMsRUFDNUIsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFDL0QsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQ3ZCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWRpdG9yU3RhdGUsIFRyYW5zYWN0aW9ufSBmcm9tIFwicHJvc2VtaXJyb3Itc3RhdGVcIjtcbmltcG9ydCB7Q29tbWFuZCwgQ29tbWFuZERpc3BhdGNofSBmcm9tIFwiLi4vY29tbWFuZFwiO1xuaW1wb3J0IHt0b2dnbGVCbG9ja01hcmt9IGZyb20gXCIuLi9jb21tYW5kcy90b29nbGUtYmxvY2stbWFya1wiO1xuaW1wb3J0IHtBbGlnbm1lbnRTdGF0ZX0gZnJvbSBcIi4vYWxpZ25tZW50LXN0YXRlXCI7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciB0aGUgY29tbWFuZHMgb25lIGFmdGVyIHRoZSBvdGhlcixcbiAqIHBhc3NlcyB0aGUgdHIgdGhyb3VnaCBhbmQgZGlzcGF0Y2hlcyB0aGUgY3VtdWxhdGVkIHRyYW5zYWN0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBjYXNjYWRlQ29tbWFuZHMgPSAoY21kczogQXJyYXk8Q29tbWFuZD4pID0+IChcbiAgICBzdGF0ZTogRWRpdG9yU3RhdGUsXG4gICAgZGlzcGF0Y2g/OiBDb21tYW5kRGlzcGF0Y2gsXG4pID0+IHtcbiAgICBjb25zdCB7dHI6IGJhc2VUcn0gPSBzdGF0ZTtcbiAgICBsZXQgc2hvdWxkRGlzcGF0Y2ggPSBmYWxzZTtcblxuICAgIGNvbnN0IG9uRGlzcGF0Y2hBY3Rpb24gPSAodHI6IFRyYW5zYWN0aW9uKSA9PiB7XG4gICAgICAgIHRyLnN0ZXBzLmZvckVhY2goc3QgPT4ge1xuICAgICAgICAgICAgYmFzZVRyLnN0ZXAoc3QpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2hvdWxkRGlzcGF0Y2ggPSB0cnVlO1xuICAgIH07XG5cbiAgICBjbWRzLmZvckVhY2goY21kID0+IHtcbiAgICAgICAgY21kKHN0YXRlLCBvbkRpc3BhdGNoQWN0aW9uKTtcbiAgICB9KTtcblxuICAgIGlmIChkaXNwYXRjaCAmJiBzaG91bGREaXNwYXRjaCkge1xuICAgICAgICBkaXNwYXRjaChiYXNlVHIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQWxpZ25hYmxlID0gKGFsaWduPzogQWxpZ25tZW50U3RhdGUpOiBDb21tYW5kID0+IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcblxuICAgIGNvbnN0IHtcbiAgICAgICAgbm9kZXM6IHtwYXJhZ3JhcGgsIGhlYWRpbmd9LFxuICAgICAgICBtYXJrczoge2FsaWdubWVudH0sXG4gICAgfSA9IHN0YXRlLnNjaGVtYTtcblxuICAgIHJldHVybiB0b2dnbGVCbG9ja01hcmsoXG4gICAgICAgIGFsaWdubWVudCxcbiAgICAgICAgKCkgPT4gKCFhbGlnbiA/IHVuZGVmaW5lZCA6IGFsaWduID09PSBcImxlZnRcIiA/IGZhbHNlIDoge2FsaWdufSksXG4gICAgICAgIFtwYXJhZ3JhcGgsIGhlYWRpbmddLFxuICAgICkoc3RhdGUsIGRpc3BhdGNoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjaGFuZ2VBbGlnbm1lbnQgPSAoYWxpZ24/OiBBbGlnbm1lbnRTdGF0ZSk6IENvbW1hbmQgPT4gKHN0YXRlLCBkaXNwYXRjaCkgPT4ge1xuXG4gICAgY29uc3Qge1xuICAgICAgICBub2Rlczoge3BhcmFncmFwaCwgaGVhZGluZ30sXG4gICAgICAgIG1hcmtzOiB7YWxpZ25tZW50fVxuICAgIH0gPSBzdGF0ZS5zY2hlbWE7XG5cbiAgICByZXR1cm4gdG9nZ2xlQmxvY2tNYXJrKGFsaWdubWVudCxcbiAgICAgICAgKCkgPT4gKCFhbGlnbiA/IHVuZGVmaW5lZCA6IGFsaWduID09PSBcImxlZnRcIiA/IGZhbHNlIDoge2FsaWdufSksXG4gICAgICAgIFtwYXJhZ3JhcGgsIGhlYWRpbmddLFxuICAgICkoc3RhdGUsIGRpc3BhdGNoKTtcbn07XG4iXX0=