import { joinDown, joinUp, lift, selectParentNode, toggleMark } from "prosemirror-commands";
import { redo, undo } from "prosemirror-history";
import { undoInputRule } from "prosemirror-inputrules";
import { splitListItem } from "prosemirror-schema-list";
const mac = typeof navigator !== "undefined" ? /Mac/.test(navigator.platform) : false;
export function buildKeymap(schema, mapKeys) {
    const keys = {};
    let type;
    function bind(key, cmd) {
        if (mapKeys) {
            const mapped = mapKeys[key];
            if (mapped === false) {
                return;
            }
            if (mapped) {
                key = mapped;
            }
        }
        keys[key] = cmd;
    }
    bind("Mod-z", undo);
    bind("Shift-Mod-z", redo);
    bind("Backspace", undoInputRule);
    if (!mac) {
        bind("Mod-y", redo);
    }
    bind("Alt-ArrowUp", joinUp);
    bind("Alt-ArrowDown", joinDown);
    bind("Mod-BracketLeft", lift);
    bind("Escape", selectParentNode);
    if (type = schema.marks.strong) {
        bind("Mod-b", toggleMark(type));
        bind("Mod-B", toggleMark(type));
    }
    if (type = schema.marks.em) {
        bind("Mod-i", toggleMark(type));
        bind("Mod-I", toggleMark(type));
    }
    if (type = schema.marks.underline) {
        bind("Mod-u", toggleMark(type));
        bind("Mod-U", toggleMark(type));
    }
    if (type = schema.nodes.listItem) {
        bind("Enter", splitListItem(type));
    }
    if (type = schema.nodes.hardBreak) {
        const br = type;
        const cmd = (state, dispatch) => {
            dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());
            return true;
        };
        bind("Mod-Enter", cmd);
        bind("Shift-Enter", cmd);
        if (mac) {
            bind("Ctrl-Enter", cmd);
        }
    }
    return keys;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5bWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2h0bWwtZWRpdG9yL3Byb3NlbWlycm9yL2tleW1hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDMUYsT0FBTyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMvQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFckQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBRXRELE1BQU0sR0FBRyxHQUFHLE9BQU8sU0FBUyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUV0RixNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQWMsRUFBRSxPQUFhO0lBRXJELE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNoQixJQUFJLElBQVMsQ0FBQztJQUVkLFNBQVMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHO1FBRWxCLElBQUksT0FBTyxFQUFFO1lBQ1QsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTVCLElBQUksTUFBTSxLQUFLLEtBQUssRUFBRTtnQkFDbEIsT0FBTzthQUNWO1lBRUQsSUFBSSxNQUFNLEVBQUU7Z0JBQ1IsR0FBRyxHQUFHLE1BQU0sQ0FBQzthQUNoQjtTQUNKO1FBRUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBR0QsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQyxXQUFXLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDakMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNOLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDdkI7SUFFRCxJQUFJLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLElBQUksQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDaEMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUVqQyxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtRQUM1QixJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDbkM7SUFFRCxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUN4QixJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDbkM7SUFFRCxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtRQUMvQixJQUFJLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDbkM7SUFFRCxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtRQUM5QixJQUFJLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ3RDO0lBRUQsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUU7UUFFL0IsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBRWhCLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQzVCLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7WUFDdEUsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXpCLElBQUksR0FBRyxFQUFFO1lBQ0wsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUMzQjtLQUNKO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7am9pbkRvd24sIGpvaW5VcCwgbGlmdCwgc2VsZWN0UGFyZW50Tm9kZSwgdG9nZ2xlTWFya30gZnJvbSBcInByb3NlbWlycm9yLWNvbW1hbmRzXCI7XG5pbXBvcnQge3JlZG8sIHVuZG99IGZyb20gXCJwcm9zZW1pcnJvci1oaXN0b3J5XCI7XG5pbXBvcnQge3VuZG9JbnB1dFJ1bGV9IGZyb20gXCJwcm9zZW1pcnJvci1pbnB1dHJ1bGVzXCI7XG5pbXBvcnQge1NjaGVtYX0gZnJvbSBcInByb3NlbWlycm9yLW1vZGVsXCI7XG5pbXBvcnQge3NwbGl0TGlzdEl0ZW19IGZyb20gXCJwcm9zZW1pcnJvci1zY2hlbWEtbGlzdFwiO1xuXG5jb25zdCBtYWMgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiID8gL01hYy8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pIDogZmFsc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEtleW1hcChzY2hlbWE6IFNjaGVtYSwgbWFwS2V5cz86IGFueSkge1xuXG4gICAgY29uc3Qga2V5cyA9IHt9O1xuICAgIGxldCB0eXBlOiBhbnk7XG5cbiAgICBmdW5jdGlvbiBiaW5kKGtleSwgY21kKSB7XG5cbiAgICAgICAgaWYgKG1hcEtleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hcHBlZCA9IG1hcEtleXNba2V5XTtcblxuICAgICAgICAgICAgaWYgKG1hcHBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtYXBwZWQpIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBtYXBwZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBrZXlzW2tleV0gPSBjbWQ7XG4gICAgfVxuXG5cbiAgICBiaW5kKFwiTW9kLXpcIiwgdW5kbyk7XG4gICAgYmluZChcIlNoaWZ0LU1vZC16XCIsIHJlZG8pO1xuICAgIGJpbmQoXCJCYWNrc3BhY2VcIiwgdW5kb0lucHV0UnVsZSk7XG4gICAgaWYgKCFtYWMpIHtcbiAgICAgICAgYmluZChcIk1vZC15XCIsIHJlZG8pO1xuICAgIH1cblxuICAgIGJpbmQoXCJBbHQtQXJyb3dVcFwiLCBqb2luVXApO1xuICAgIGJpbmQoXCJBbHQtQXJyb3dEb3duXCIsIGpvaW5Eb3duKTtcbiAgICBiaW5kKFwiTW9kLUJyYWNrZXRMZWZ0XCIsIGxpZnQpO1xuICAgIGJpbmQoXCJFc2NhcGVcIiwgc2VsZWN0UGFyZW50Tm9kZSk7XG5cbiAgICBpZiAodHlwZSA9IHNjaGVtYS5tYXJrcy5zdHJvbmcpIHtcbiAgICAgICAgYmluZChcIk1vZC1iXCIsIHRvZ2dsZU1hcmsodHlwZSkpO1xuICAgICAgICBiaW5kKFwiTW9kLUJcIiwgdG9nZ2xlTWFyayh0eXBlKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPSBzY2hlbWEubWFya3MuZW0pIHtcbiAgICAgICAgYmluZChcIk1vZC1pXCIsIHRvZ2dsZU1hcmsodHlwZSkpO1xuICAgICAgICBiaW5kKFwiTW9kLUlcIiwgdG9nZ2xlTWFyayh0eXBlKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPSBzY2hlbWEubWFya3MudW5kZXJsaW5lKSB7XG4gICAgICAgIGJpbmQoXCJNb2QtdVwiLCB0b2dnbGVNYXJrKHR5cGUpKTtcbiAgICAgICAgYmluZChcIk1vZC1VXCIsIHRvZ2dsZU1hcmsodHlwZSkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlID0gc2NoZW1hLm5vZGVzLmxpc3RJdGVtKSB7XG4gICAgICAgIGJpbmQoXCJFbnRlclwiLCBzcGxpdExpc3RJdGVtKHR5cGUpKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9IHNjaGVtYS5ub2Rlcy5oYXJkQnJlYWspIHtcblxuICAgICAgICBjb25zdCBiciA9IHR5cGU7XG5cbiAgICAgICAgY29uc3QgY21kID0gKHN0YXRlLCBkaXNwYXRjaCkgPT4ge1xuICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIucmVwbGFjZVNlbGVjdGlvbldpdGgoYnIuY3JlYXRlKCkpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgYmluZChcIk1vZC1FbnRlclwiLCBjbWQpO1xuICAgICAgICBiaW5kKFwiU2hpZnQtRW50ZXJcIiwgY21kKTtcblxuICAgICAgICBpZiAobWFjKSB7XG4gICAgICAgICAgICBiaW5kKFwiQ3RybC1FbnRlclwiLCBjbWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleXM7XG59XG4iXX0=