import { getListLiftTarget } from "../utils/get-list-lift-target";
// The function will list paragraphs in selection out to level 1 below root list.
export function liftSelectionList(state, tr) {
    const { from, to } = state.selection;
    const { paragraph } = state.schema.nodes;
    const listCol = [];
    tr.doc.nodesBetween(from, to, (node, pos) => {
        if (node.type === paragraph) {
            listCol.push({ node, pos });
        }
    });
    for (let i = listCol.length - 1; i >= 0; i--) {
        const paragraph = listCol[i];
        const start = tr.doc.resolve(tr.mapping.map(paragraph.pos));
        if (start.depth > 0) {
            let end;
            if (paragraph.node.textContent && paragraph.node.textContent.length > 0) {
                end = tr.doc.resolve(tr.mapping.map(paragraph.pos + paragraph.node.textContent.length));
            }
            else {
                end = tr.doc.resolve(tr.mapping.map(paragraph.pos + 1));
            }
            const range = start.blockRange(end);
            if (range) {
                tr.lift(range, getListLiftTarget(state.schema, start));
            }
        }
    }
    return tr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmdC1zZWxlY3Rpb24tbGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9odG1sLWVkaXRvci9wcm9zZW1pcnJvci9saXN0L3RyYW5zZm9ybXMvbGlmdC1zZWxlY3Rpb24tbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUVoRSxpRkFBaUY7QUFDakYsTUFBTSxVQUFVLGlCQUFpQixDQUM3QixLQUFrQixFQUNsQixFQUFlO0lBRWYsTUFBTSxFQUFDLElBQUksRUFBRSxFQUFFLEVBQUMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBQ25DLE1BQU0sRUFBQyxTQUFTLEVBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUN2QyxNQUFNLE9BQU8sR0FBVSxFQUFFLENBQUM7SUFDMUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN4QyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztTQUM3QjtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0gsS0FBSyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1RCxJQUFJLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2pCLElBQUksR0FBRyxDQUFDO1lBQ1IsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNyRSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQ2hCLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQ3BFLENBQUM7YUFDTDtpQkFBTTtnQkFDSCxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNEO1lBQ0QsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwQyxJQUFJLEtBQUssRUFBRTtnQkFDUCxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDMUQ7U0FDSjtLQUNKO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFZGl0b3JTdGF0ZSwgVHJhbnNhY3Rpb259IGZyb20gXCJwcm9zZW1pcnJvci1zdGF0ZVwiO1xuaW1wb3J0IHtnZXRMaXN0TGlmdFRhcmdldH0gZnJvbSBcIi4uL3V0aWxzL2dldC1saXN0LWxpZnQtdGFyZ2V0XCI7XG5cbi8vIFRoZSBmdW5jdGlvbiB3aWxsIGxpc3QgcGFyYWdyYXBocyBpbiBzZWxlY3Rpb24gb3V0IHRvIGxldmVsIDEgYmVsb3cgcm9vdCBsaXN0LlxuZXhwb3J0IGZ1bmN0aW9uIGxpZnRTZWxlY3Rpb25MaXN0KFxuICAgIHN0YXRlOiBFZGl0b3JTdGF0ZSxcbiAgICB0cjogVHJhbnNhY3Rpb24sXG4pOiBUcmFuc2FjdGlvbiB7XG4gICAgY29uc3Qge2Zyb20sIHRvfSA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICBjb25zdCB7cGFyYWdyYXBofSA9IHN0YXRlLnNjaGVtYS5ub2RlcztcbiAgICBjb25zdCBsaXN0Q29sOiBhbnlbXSA9IFtdO1xuICAgIHRyLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gcGFyYWdyYXBoKSB7XG4gICAgICAgICAgICBsaXN0Q29sLnB1c2goe25vZGUsIHBvc30pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZm9yIChsZXQgaSA9IGxpc3RDb2wubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgcGFyYWdyYXBoID0gbGlzdENvbFtpXTtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSB0ci5kb2MucmVzb2x2ZSh0ci5tYXBwaW5nLm1hcChwYXJhZ3JhcGgucG9zKSk7XG4gICAgICAgIGlmIChzdGFydC5kZXB0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBlbmQ7XG4gICAgICAgICAgICBpZiAocGFyYWdyYXBoLm5vZGUudGV4dENvbnRlbnQgJiYgcGFyYWdyYXBoLm5vZGUudGV4dENvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IHRyLmRvYy5yZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICB0ci5tYXBwaW5nLm1hcChwYXJhZ3JhcGgucG9zICsgcGFyYWdyYXBoLm5vZGUudGV4dENvbnRlbnQubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbmQgPSB0ci5kb2MucmVzb2x2ZSh0ci5tYXBwaW5nLm1hcChwYXJhZ3JhcGgucG9zICsgMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBzdGFydC5ibG9ja1JhbmdlKGVuZCk7XG4gICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0ci5saWZ0KHJhbmdlLCBnZXRMaXN0TGlmdFRhcmdldChzdGF0ZS5zY2hlbWEsIHN0YXJ0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRyO1xufVxuIl19